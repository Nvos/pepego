type Todo {
  id: ID!
  text: String! @inputLogging
  done: Boolean!
  user: User!
  createdAt: Time!
  lastEditedBy: User
  tags: [Tag!]!
}

type Tag {
    id: ID!
    name: String!
}

type User {
  id: ID!
  name: String!
}

input NewTodo {
  text: String!
  tags: [ID!]!
  userId: String!
}

input NewUser {
    name: String!
}

input EditTodo {
  id: ID!
  text: String
  done: Boolean
  tags: [ID!]
  lastEditedById: ID!
}

input NewTag {
    name: String! @inputLogging
}

input EditTag {
    id: ID!
    name: String!
}


type Mutation {
  createTodo(input: NewTodo!): Todo!
  editTodo(input: EditTodo!): Todo
  createUser(input: NewUser!): User!
  createTag(input: NewTag!): Tag!
  editTag(input: EditTag!): Tag
}

type Query {
  todos: [Todo!]!
  todo(id: ID!): Todo
  users: [User!]!
  tags: [Tag!]!
  search(text: String!): [SearchResult!]!
}

type Subscription {
  todoChanges: Todo!
}

directive @inputLogging on INPUT_OBJECT

scalar Time

union SearchResult = User | Tag | Todo